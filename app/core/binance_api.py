import os
from binance.client import Client
from binance.exceptions import BinanceAPIException

# Carrega as vari√°veis do .env
API_KEY = os.getenv("BINANCE_API_KEY")
API_SECRET = os.getenv("BINANCE_API_SECRET")

if not API_KEY or not API_SECRET:
    raise ValueError("‚ö†Ô∏è API_KEY ou API_SECRET n√£o encontrados. Verifique seu .env ou vari√°veis do Render.")

client = Client(API_KEY, API_SECRET)

# === Fun√ß√£o para pegar o pre√ßo ao vivo ===
def get_price(symbol="BTCUSDT"):
    try:
        ticker = client.get_symbol_ticker(symbol=symbol)
        return float(ticker['price'])
    except Exception as e:
        print(f"Erro ao obter pre√ßo do ativo {symbol}: {e}")
        return None

# === Fun√ß√£o para executar compra ===
def buy_crypto(symbol, quantity):
    try:
        order = client.order_market_buy(
            symbol=symbol,
            quantity=round(quantity, 6)
        )
        print(f"üü¢ Ordem de COMPRA executada: {order}")
    except BinanceAPIException as e:
        print(f"‚ùå Erro na compra: {e.message}")
    except Exception as e:
        print(f"‚ùå Erro inesperado na compra: {e}")

# === Fun√ß√£o para executar venda ===
def sell_crypto(symbol, quantity):
    try:
        order = client.order_market_sell(
            symbol=symbol,
            quantity=round(quantity, 6)
        )
        print(f"üî¥ Ordem de VENDA executada: {order}")
    except BinanceAPIException as e:
        print(f"‚ùå Erro na venda: {e.message}")
    except Exception as e:
        print(f"‚ùå Erro inesperado na venda: {e}")
